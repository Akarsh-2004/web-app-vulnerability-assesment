import requests
import urllib.parse
from bs4 import BeautifulSoup
import subprocess
import re
import json
from scrapy.crawler import CrawlerProcess
from scrapy.spiders import CrawlSpider, Rule
from scrapy.linkextractors import LinkExtractor
from scrapy.item import Item, Field
from scrapy.loader import ItemLoader
from scrapy.loader.processors import TakeFirst

class WebVulnerabilityScanner:
    def __init__(self, url):
        self.url = url
        self.vulnerabilities = {
            'SQL Injection': {'payload': "'; SELECT 1--", 'pattern': 'SQL syntax'},
            'XSS': {'payload': "<script>alert(1)</script>", 'pattern': None},
            'OS Command Injection': {'payload': "; ping -c 1 127.0.0.1;", 'pattern': None},
            'SSRF': {'payload': "http://localhost:8080", 'pattern': None},
            'CSRF': {'payload': None, 'pattern': None},
            'File Inclusion': {'payload': "../../../../etc/passwd", 'pattern': None}
        }
        self.session = requests.Session()

    def _send_request(self, url, payload):
        test_url = f"{url}?{urllib.parse.urlencode({'id': payload})}"
        response = self.session.get(test_url, headers={'User-Agent': 'Mozilla/5.0'})
        return response

    def _check_sql_injection(self, url):
        try:
            command = f"sqlmap -u {url} --batch --level 1 --risk 1"
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = process.communicate()
            if "vulnerable" in str(output).lower():
                return True
        except Exception as e:
            print(f"Error running sqlmap: {e}")
        return False

    def _check_xss(self, url):
        try:
            test_payload = "<script>alert(1)</script>"
            test_url = f"{url}?q={urllib.parse.quote(test_payload)}"
            response = self.session.get(test_url)
            soup = BeautifulSoup(response.text, 'html.parser')
            scripts = soup.find_all('script', string=re.compile(test_payload))
            if scripts:
                return True
        except Exception as e:
            print(f"Error checking XSS: {e}")
        return False

    def _check_os_command_injection(self, url):
        try:
            test_payload = "; ping -c 1 127.0.0.1;"
            test_url = f"{url}?q={urllib.parse.quote(test_payload)}"
            response = self.session.get(test_url)
            if "ping" in response.text:
                return True
        except Exception as e:
            print(f"Error checking OS Command Injection: {e}")
        return False

    def _check_ssrf(self, url):
        try:
            test_payload = "http://localhost:8080"
            test_url = f"{url}?q={urllib.parse.quote(test_payload)}"
            response = self.session.get(test_url)
            if "localhost" in response.text:
                return True
        except Exception as e:
            print(f"Error checking SSRF: {e}")
        return False

    def _check_csrf(self, url):
        try:
            response = self.session.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            forms = soup.find_all('form')
            for form in forms:
                if not form.find('input', {'name': 'csrf_token'}):
                    return True
        except Exception as e:
            print(f"Error checking CSRF: {e}")
        return False

    def _check_file_inclusion(self, url):
        try:
            test_payload = "../../../../etc/passwd"
            test_url = f"{url}?file={urllib.parse.quote(test_payload)}"
            response = self.session.get(test_url)
            if "root:" in response.text:
                return True
        except Exception as e:
            print(f"Error checking File Inclusion: {e}")
        return False

    def check_vulnerability(self, vulnerability, url):
        if vulnerability == 'SQL Injection':
            return self._check_sql_injection(url)
        elif vulnerability == 'XSS':
            return self._check_xss(url)
        elif vulnerability == 'OS Command Injection':
            return self._check_os_command_injection(url)
        elif vulnerability == 'SSRF':
            return self._check_ssrf(url)
        elif vulnerability == 'CSRF':
            return self._check_csrf(url)
        elif vulnerability == 'File Inclusion':
            return self._check_file_inclusion(url)
        # Add more vulnerability checks as needed

    def scan_website(self):
        print(f"Scanning {self.url}...")
        results